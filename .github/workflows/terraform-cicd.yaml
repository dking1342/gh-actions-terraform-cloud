name: Terraform Setup

on:
  push: 
    branches:
      - main

jobs:
  cicd:
    name: "Terraform CICD Pipeline"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install jq

      - name: SSH setup
        run: |
          sudo mkdir -p /home/runner/.ssh
          sudo chmod 777 /home/runner/.ssh
          sudo touch /home/runner/.ssh/do_key_01
          sudo touch /home/runner/.ssh/do_key_01.pub
          sudo chmod 777 /home/runner/.ssh/do_key_01
          sudo chmod 777 /home/runner/.ssh/do_key_01.pub
          sudo echo "${{ secrets.DO_KEY_01 }}" > /home/runner/.ssh/do_key_01
          sudo echo "${{ secrets.DO_KEY_01_PUB }}" > /home/runner/.ssh/do_key_01.pub

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: cd terraform && terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          cd terraform && \
          rm -fr .terraform && \
          rm -fr .terraform.lock.hcl && \
          terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform && \
          terraform plan \
            -var "do_token=${DO_PAT}" \
            -var "pvt_key=~/.ssh/do_key_01" \
            -var "pub_key=~/.ssh/do_key_01.pub"
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd terraform && \ 
          terraform apply \
            -auto-approve \
            -var "do_token=${DO_PAT}" \
            -var "pvt_key=~/.ssh/do_key_01" \
            -var "pub_key=~/.ssh/do_key_01.pub"

      - name: Host inventory configuration
        id: inventory
        if: steps.apply.outcome == 'success'
        run: |
          export TF_TOKEN=$(cat ./config/credentials.tfrc.json | jq '.credentials."app.terraform.io".token' | sed 's/\"//g') && \
          curl --header "Authorization: Bearer $TF_TOKEN" --header "Content-Type: application/vnd.api+json" "https://app.terraform.io/api/v2/organizations/kavooce1/workspaces/" > ./ansible/ws.json && \
          export TF_PROJECT=$(cat ./ansible/ws.json | jq '.data[0].id' | sed 's/\"//g') && \
          curl --header "Authorization: Bearer $TF_TOKEN" --header "Content-Type: application/vnd.api+json" "https://app.terraform.io/api/v2/workspaces/$TF_PROJECT/current-state-version?include=outputs" > ./ansible/outputs.json && \
          if test -f "./ansible/hosts.ini"; then
            rm ./ansible/hosts.ini
          fi && \
          echo "[droplets]" > ./ansible/hosts.ini && \
          curl --header "Authorization: Bearer $TF_TOKEN" --header "Content-Type: application/vnd.api+json" "https://app.terraform.io/api/v2/workspaces/$TF_PROJECT/current-state-version?include=outputs" | grep -Eo "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" >> ./ansible/hosts.ini

      - name: Sleep
        id: sleep
        run: sleep 30

      - name: Ansible Playbook
        id: playbook
        run: ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -e "pub_key=/home/runner/.ssh/do_key_01.pub" ./ansible/apache-install.yml

      